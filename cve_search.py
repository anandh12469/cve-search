import requests
import argparse
import sys
import json
from bs4 import BeautifulSoup


def search_key(_key):
    print("Searching: " + _key)
    SEARCHURL = "https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=" + _key
    r = requests.get(SEARCHURL)
    if r.status_code != 200:
        sys.exit("Something wrong.")
    else:
        soup = BeautifulSoup(r.content, 'html.parser')
        for a in soup.find_all('a', href=True):
            n = a['href']
            vari = "="
            x = n.partition(vari)[2]
            print(x)


def search_cve_version(_key, _version):
    print("Searching: " + _key + _version)
    SEARCHURL = "https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=" + _key + " " + _version
    r = requests.get(SEARCHURL)
    if r.status_code != 200:
        sys.exit("Something wrong.")
    else:
        soup = BeautifulSoup(r.content, 'html.parser')
        for a in soup.find_all('a', href=True):
            n = a['href']
            vari = "="
            x = n.partition(vari)[2]
            print(x.rstrip())


def search_cve(_cve):
    print("Searching: " + _cve)
    SEARCHURL = "http://cve.circl.lu/api/cve/" + _cve
    r = requests.get(SEARCHURL)
    if r.status_code != 200:
        sys.exit("Something wrong.")
    else:
        data = json.loads(r.text)
        print("Summary: " + data['summary'])
        print("CVSS Score: " + str(data['cvss']))


def show_vendor_product(_vendor, _product):
    print("Searching: " + _product + " from " + _vendor)
    SEARCHURL =  "http://cve.circl.lu/api/search/" + _vendor + "/" + _product
    r = requests.get(SEARCHURL)
    if r.status_code != 200:
        sys.exit("Something wrong.")
    else:
        jdata = json.loads(r.text)
        for item in jdata:
            print("\nSummary: " + item['summary'])
            print("CVE: " + item['id'])
            print("CVSS: " + str(item['cvss']))


def list_vendor_products(_vendor):
    print("Vendor Search: " + _vendor)
    SEARCHURL = "http://cve.circl.lu/api/browse/" + _vendor
    r = requests.get(SEARCHURL)
    if r.status_code != 200:
        sys.exit("Something wrong.")
    else:
        print(" ... " + str(r.status_code))
        try:
            data = json.loads(r.text)['product']
            print("Available products from " + _vendor)
            for item in data:
                print(item)
        except:
            sys.exit("[!!] Vendor not in list")


def list_vendors():
    print("Listing Vendors")
    SEARCHURL = "http://cve.circl.lu/api/browse"
    r = requests.get(SEARCHURL)
    if r.status_code != 200:
        sys.exit("Something wrong.")
    else:
        print(" ... " + str(r.status_code))
        data = json.loads(r.text)['vendor']
        print("Available Vendors: ")
        for item in data:
            print(item)


def __main__():
    parser = argparse.ArgumentParser(description='CIRCL CVE API Search')
    parser.add_argument('--list-vendors', '-l', dest='listvendors', action='store_true', help='List the available vendors')
    parser.add_argument('--product', '-p', dest='product', help='Search for a product')
    parser.add_argument('--vendors', '-v', dest='vendor', help='Search for a vendor')
    parser.add_argument('--cve', '-c', dest='cve', help='Search for this CVE')
    parser.add_argument('--keyword', '-k', dest='keywords', help='Search for this keyword')
    parser.add_argument('--ver', '-ver', dest='ver', help='Search for this version')
    args = parser.parse_args()
    _key = args.keywords
    _cve = args.cve
    _product = args.product
    _vendor = args.vendor
    _listvendors = args.listvendors
    _version = args.ver

#main_call
    if (args.vendor and args.product):
        show_vendor_product(_vendor, _product)
    elif (args.keywords and args.ver):
        search_cve_version(_key, _version)
    else:
        if args.cve:
            search_cve(_cve)
        elif args.keywords:
            search_key(_key)
        elif (args.vendor and not args.product):
            list_vendor_products(_vendor)
        elif args.listvendors:
            list_vendors()


if __name__ == '__main__':
    __main__()
